509. Fibonacci Number

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

class Solution {
public:
    int fib(int n) {
        //base case
        if(n<=1){
            return n;
        }
        int ans = fib(n-1) + fib(n-2);
        return ans;
    }
};


Q2 -- Count Ways To Reach The N-th Stairs (vvimp  -> interview)  OR Jump Game
int n = 2
o/p - 3

//This sol  gives Time Limit Exceed --> can be solved using DP
int countDistinctWays(int nStairs) {
    //  Write your code here.
    if(nStairs < 0)
        return 0;
    if(nStairs == 0){
        return 1;
    }
    int ans= countDistinctWays(nStairs-1)
        +countDistinctWays(nStairs-2);
    return ans;
}

Q3- Say Digits
  i/p - 412
  o/p - Four One Two
  
  
#include <iostream>

using namespace std;

void sayDigits( int num, string arr[]){
 //base case
  if(num == 0){
      return ;
  }
  //Processsing
  //pick single single digits 
  int digits = num % 10;
  //update that digits
  num = num / 10;
  
  //Recursion call 
  
  sayDigits(num, arr);
  cout<<arr[digits]<<" ";
  
}

int main()
{
    string arr[10] = {"Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"};
    int num;
    cin>>num;
    sayDigits(num,arr);

    return 0;
}
  
  ##############  Power Problems vvvvimp for interview ###############
 Q3 - Power of two  
 Input: n = 16
Output: true
Explanation: 24 = 16

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n==1)
            return true;
        if(n%2 != 0 || n==0)
            return false;
        return isPowerOfTwo(n/2);
    }
};

Q4. Power of Four
Input: n = 16
Output: true

class Solution {
public:
    bool isPowerOfFour(int n) {
        //base case 
     if(n==0){
       return false ;
        }
          while(n%4==0){
            n=n/4;
           }
        if(n==1){
         return true;
         }
          else return false;

    }
};



Q5. Find sum of the array element

#include <iostream>
#include <vector>
using namespace std;
int getSum(int arr[],int size){
    //base case
    if(size == 1)
    return arr[0];
    //recursive function
    int sum = arr[0]+getSum(arr+1,size-1); //first elem + remaining ele lekr ayga recursion
    return sum;
}

int main()
{
  int arr[10] = {3,2,5,1,6};
  int size=5;
  cout<<getSum(arr,5);
 
    return 0;
}

o/p-30
                   ######################### LINEAR SEARCH #################################
                   
                   
Q6. Linear Search using recursion

#include<iostream>
using namespace std;

void print(int arr[], int n) {
    cout << "Size of array is " << n << endl;

    for(int i=0; i<n; i++) {
        cout << arr[i] << " ";
    } cout << endl;

}

bool linearSearch(int arr[], int size, int k ) {
    print(arr,size);
    //base case
    if(size == 0) 
        return false;

    if(arr[0] == k) {
        return true;
    }
    else {
        bool remainingPart = linearSearch(arr+1, size-1, k );
        return remainingPart;
    }
}

int main() {

    int arr[5] = {3,5,1,2,6};
    int size = 5;
    int key = 6;
    bool ans = linearSearch(arr, size, key);

    if(ans ){
        cout << "Present " << endl;
    }
    else{
        cout << "absent " << endl;
    }

    return 0;
}

         ############################ BINARY SEARCH ####################################

Q7. Binary Search using recursion


int binarySerach(int arr[],int start,int end,int target){
      
    int mid = (start + end)/2;
      
      if(start > end) { // base case  -> elem not found
          return false;
      }
      
      if(arr[mid] == target){
          return true;
      }
      
   if(arr[mid] < target){
       //move to right  part --> recusrion call krnge(start = mid+1)
       return binarySerach(arr,mid+1,end,target);
   }
   else{
      //move to left part --> recusrion call krnge(end = mid-1)
       return binarySerach(arr,start,mid-1,target);
   }
  
  
}

int main()
{
    
    int arr[10] = {2,3,4,6,7};
 
    int target = 7;
   
   
   bool ans = binarySerach(arr,0,4,7);
   if(ans){
       cout<<"present"<<endl;
   }
   else{
       cout<<"not";
   }
}





 
