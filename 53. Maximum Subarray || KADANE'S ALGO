Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Approach 1: O(N3)


Aprroach 2 : O(N2)
int main(){
            
    int arr[4] = {-1,-2,-3,-4};
    
        // Your code here
    int maxi = -1;
      
       for(int i=0;i<4;i++){
           int sum = 0;
        for(int j=i;j<4;j++){
                sum += arr[j];
        }
       
       maxi = max(maxi,sum);
       
       }
        
        cout<< maxi;
        return 0;
    }
    
    Aproach 3 -- > Here we apply KADANE'S ALGO
    
    a. This algo solve the -ve ele problems in subarray
    
    class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      // Apply Kadane's algo
        
        int sum = 0;
        int maxi = INT_MIN;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            
            maxi = max(maxi,sum);
            
            //if sum of ele in subarray is-ve --> discord that subarray
            if(sum<0)
                sum = 0;
        }
       return maxi; 
    }
};
    
    
