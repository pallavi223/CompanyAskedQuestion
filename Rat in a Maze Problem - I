N = 4
m[][] = {{1, 0, 0, 0},
         {1, 1, 0, 1}, 
         {1, 1, 0, 0},
         {0, 1, 1, 1}}
Output:
DDRDRR DRDDRR

class Solution{
    private:
     bool isSafe(vector<vector<int>>& m,int n,vector<vector<int>> visited,int x,int y){
         if((x >= 0 && x<n) && (y>=0 && y<n) && visited[x][y] == 0 && m[x][y]==1){
             return true;
         }
         return false;
     }
    
    
    void solve(vector<vector<int>>& m,int n,vector<string>& ans,vector<vector<int>> visited,int x,int y,string path){
        //base case
        if(x == n-1 && y == n-1){
            ans.push_back(path);
            return;
        }
        
       
        //marked viisted array 1 (agar vha phuch gye)
        visited[x][y] = 1;
        
         //RR to get all paths -> 4paths(choices) - UDRL
        //check cond for movement of rat
        //RR call for Down
           int newX = x+1;
           int newY = y;
        if(isSafe(m,n,visited,newX,newY)){
            path.push_back('D');
            solve(m,n,ans,visited,newX,newY,path);
            //Backtrack
            path.pop_back();
             
        }
        //RR call for Right
         newX = x;
         newY = y+1;
        if(isSafe(m,n,visited,newX,newY)){
            path.push_back('R');
            solve(m,n,ans,visited,newX,newY,path);
            //Backtrack
            path.pop_back();
        }
        
        //RR call for UP
         newX=x-1;
         newY=y;
        if(isSafe(m,n,visited,newX,newY)){
            path.push_back('U');
            solve(m,n,ans,visited,newX,newY,path);
            //Backtrack
            path.pop_back();
            
        }
        //RR call for Left
         newX = x;
         newY = y-1;
        if(isSafe(m,n,visited,newX,newY)){
           path.push_back('L');
           solve(m,n,ans,visited,newX,newY,path);
           //Backtrack
           path.pop_back();
               }
    
        //at the time return | Backtrack markd visited array as false(0)
        visited[x][y] = 0;
        
        
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        int srcX=0;
        int srcY=0;
        vector<vector<int>> visited = m;
        if(m[0][0] == 0){
            return ans;
        }
        //We initially 0 to visited matrix
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                visited[i][j] = 0;
            }
        }
       string path = "";
       solve(m, n, ans, visited, srcX,srcY,path);
       return ans;
    }
};
