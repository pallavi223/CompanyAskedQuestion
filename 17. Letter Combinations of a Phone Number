Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

class Solution {
    
private:
void solve(string digits, string output, int index, string mappings[], vector<string>& ans){
    //base case
    if(index >= digits.length()){
        ans.push_back(output);
        return ;
    }
    
    int number = digits[index]-'0';  // gives number if we minus 0 here --> (2,3) gives digits 2-> mapping abc 
    string value = mappings[number]; // us digits  k corresponding value nikal li 
        
    //RR call to three cases (abc,def) -> ek baar a k liye , baar b k liye , ek baar c k liye call marni ha (loop lgya)
    for(int i=0;i<value.length();i++){
        output.push_back(value[i]);
        solve(digits,output,index+1,mappings,ans);
        output.pop_back();   //abc ko pop krdia --> backtracking krni ha
    }
}
    
public:
    vector<string> letterCombinations(string digits) {
       
        vector<string> ans;
         if(digits.length()==0){
            return ans;
        }
         string output="";
        int index=0;
       
        string mappings[10] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        
        
        solve(digits,output,index,mappings,ans);
        return ans;
    }
    
};
